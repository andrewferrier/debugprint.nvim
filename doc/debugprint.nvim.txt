*debugprint.nvim.txt*             For NVIM             Last change: 2024-11-01

==============================================================================
Table of Contents                          *debugprint.nvim-table-of-contents*

1. Overview                                         |debugprint.nvim-overview|
2. Features                                         |debugprint.nvim-features|
3. Demo                                                 |debugprint.nvim-demo|
4. Installation                                 |debugprint.nvim-installation|
5. Keymappings and Commands         |debugprint.nvim-keymappings-and-commands|
6. Mapping Deprecation                   |debugprint.nvim-mapping-deprecation|
7. Other Options                               |debugprint.nvim-other-options|
8. Known Limitations                       |debugprint.nvim-known-limitations|
9. Feature Comparison with Similar Plugins|debugprint.nvim-feature-comparison-with-similar-plugins|
10. Links                                              |debugprint.nvim-links|



==============================================================================
1. Overview                                         *debugprint.nvim-overview*

`debugprint` is a NeoVim plugin that simplifies debugging for those who prefer
a low-tech approach. Instead of using a sophisticated debugger like nvim-dap
<https://github.com/mfussenegger/nvim-dap>, some people prefer using a
'print'-like statement to trace the output during execution. With `debugprint`,
you can insert these statements, including the values of variables, relevant to
the language you’re editing.


==============================================================================
2. Features                                         *debugprint.nvim-features*

`debugprint` is inspired by vim-debugstring
<https://github.com/bergercookie/vim-debugstring>; updated for the NeoVim
generation. It:

- Supports 32 filetypes/programming languages out-of-the-box, including Python,
    JavaScript/TypeScript, Java, C/C++ and |debugprint.nvim-more|. It can also be
    extended to support other languages or customize existing ones <SHOWCASE.md>.
- Includes reference information in each 'print line' such as file names, line
    numbers, a counter, and snippets of other lines to make it easier to
    cross-reference them in output.
- Can output the value of variables (or in some cases, expressions).
- Dot-repeats <https://jovicailic.org/2018/03/vim-the-dot-command/>.
- Can detect a Treesitter variable name under the cursor for some languages, or
    will prompt with a sensible default. It understands Treesitter embedded
    languages (e.g. JavaScript-in-HTML).
- Provides keymappings for normal, visual, and operator-pending modes.
- Provides commands to delete debugging lines added to the current buffer or
    comment/uncomment those lines.
- Can optionally move to the inserted line (or not).
- Is MIT Licensed <LICENSE.txt>.


==============================================================================
3. Demo                                                 *debugprint.nvim-demo*



==============================================================================
4. Installation                                 *debugprint.nvim-installation*

**Requires NeoVim 0.9+.**

Example for `lazy.nvim` <https://github.com/folke/lazy.nvim>:

>lua
    return {
        "andrewferrier/debugprint.nvim",
    
        -- opts = { … },
    
        dependencies = {
            "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
        },
    }
<

Example for `packer.nvim` <https://github.com/wbthomason/packer.nvim>:

>lua
    packer.startup(function(use)
        …
        use({
            "andrewferrier/debugprint.nvim",
            config = function()
                opts = { … }
                require("debugprint").setup(opts)
            end,
            requires = {
                "echasnovski/mini.nvim" -- Needed for :ToggleCommentDebugPrints (not needed for NeoVim 0.10+)
            }
        })
        …
    end)
<

The sections below detail the allowed options that can appear in the `opts`
object.

There is a showcase of example debugprint configurations here <SHOWCASE.md>
which can be dropped into your configuration files to further enhance your use
of debugprint.

Please subscribe to this GitHub issue
<https://github.com/andrewferrier/debugprint.nvim/issues/25> to be notified of
any breaking changes to `debugprint`.


==============================================================================
5. Keymappings and Commands         *debugprint.nvim-keymappings-and-commands*

By default, the plugin will create some keymappings and commands for use 'out
of the box'. There are also some function invocations which are not mapped to
any keymappings or commands by default, but could be. This is all shown in the
following table.

  --------------------------------------------------------------------------------------
  Mode         Default Key / Cmd           Purpose                         Above/Below
                                                                           Line
  ------------ --------------------------- ------------------------------- -------------
  Normal       g?p                         Plain debug                     Below

  Normal       g?P                         Plain debug                     Above

  Normal       g?v                         Variable debug                  Below

  Normal       g?V                         Variable debug                  Above

  Normal       None                        Variable debug (always prompt   Below
                                           for variable)                   

  Normal       None                        Variable debug (always prompt   Above
                                           for variable)                   

  Normal       None                        Delete debug lines in buffer    -

  Normal       None                        Comment/uncomment debug lines   -
                                           in buffer                       

  Visual       g?v                         Variable debug                  Below

  Visual       g?V                         Variable debug                  Above

  Op-pending   g?o                         Variable debug                  Below

  Op-pending   g?O                         Variable debug                  Above

  Command      :DeleteDebugPrints          Delete debug lines in buffer    -

  Command      :ToggleCommentDebugPrints   Comment/uncomment debug lines   -
                                           in buffer                       
  --------------------------------------------------------------------------------------
The keys and commands outlined above can be specifically overridden using the
`keymaps` and `commands` objects inside the `opts` object used above during
configuration of debugprint. For example, if configuring via `lazy.nvim`, it
might look like this:

>lua
    return {
        "andrewferrier/debugprint.nvim",
        opts = {
            keymaps = {
                normal = {
                    plain_below = "g?p",
                    plain_above = "g?P",
                    variable_below = "g?v",
                    variable_above = "g?V",
                    variable_below_alwaysprompt = nil,
                    variable_above_alwaysprompt = nil,
                    textobj_below = "g?o",
                    textobj_above = "g?O",
                    toggle_comment_debug_prints = nil,
                    delete_debug_prints = nil,
                },
                visual = {
                    variable_below = "g?v",
                    variable_above = "g?V",
                },
            },
            commands = {
                toggle_comment_debug_prints = "ToggleCommentDebugPrints",
                delete_debug_prints = "DeleteDebugPrints",
            },
            -- … Other options
        },
    }
<

You only need to include the keys / commands which you wish to override, others
will default as shown above. Setting any key or command to `nil` will skip it.

The default keymappings are chosen specifically because ordinarily in NeoVim
they are used to convert sections to ROT-13, which most folks don’t use.


==============================================================================
6. Mapping Deprecation                   *debugprint.nvim-mapping-deprecation*

_Note_: as of version 2.0.0, the old mechanism of configuring keymaps/commands
which specifically allowed for mapping directly to
`require('debugprint').debugprint(...)` is no longer officially supported or
documented. This is primarily because of confusion which arose over how to do
this mapping. Existing mappings performed this way are likely to continue to
work for some time. You should, however, migrate over to the new method
outlined above. If this doesn’t give you the flexibility to map how you wish
for some reason, please open an issue
<https://github.com/andrewferrier/debugprint.nvim/issues/new>.


==============================================================================
7. Other Options                               *debugprint.nvim-other-options*

`debugprint` supports the following options in its global `opts` object:

  ---------------------------------------------------------------------------------------------
  Option              Default      Purpose
  ------------------- ------------ ------------------------------------------------------------
  move_to_debugline   false        When adding a debug line, moves the cursor to that line

  display_location    true         Include the filename and linenumber of the line being
                                   debugged in the debug message

  display_counter     true         Include the increasing integer counter in the debug message.
                                   Can also be set to a function to customize, see the
                                   showcase) for an example

  display_snippet     true         Include a snippet of the line above/below in the debug
                                   message (plain debug lines only) for context

  filetypes           See showcase Custom filetypes - see showcase

  print_tag           DEBUGPRINT   The string inserted into each print statement, which can be
                                   used to uniquely identify statements inserted by debugprint.
                                   If you set this to '' (the empty string), no print tag will
                                   be included, but this will disable the ability to delete or
                                   comment print statements via debugprint
  ---------------------------------------------------------------------------------------------

==============================================================================
8. Known Limitations                       *debugprint.nvim-known-limitations*

- `debugprint` does not handle deleting reformatted debug lines where a
    formatter has split them across multiple lines. If you want to be able to easily
    delete your debug lines using `DeleteDebugPrints` or similar, don’t format your
    file between inserting them and running this command. See this
    issue <https://github.com/andrewferrier/debugprint.nvim/issues/119> for
    discussion on this.


==============================================================================
9. Feature Comparison with Similar Plugins*debugprint.nvim-feature-comparison-with-similar-plugins*

(This table is quite wide, you may need to scroll horizontally)

  ---------------------------------------------------------------------------------------------------------------------
  Feature                 debugprint.nvim   nvim-chainsaw   printer.nvim   refactoring.nvim   vim-printer   logsitter
  ----------------------- ----------------- --------------- -------------- ------------------ ------------- -----------
  Auto-generation of      :+1:              :x:             :+1:           :+1:               :x:           :+1:
  debug line,                                                                                               
  incl. locator info                                                                                        

  Print plain debug lines :+1:              :+1:            :x:            :+1:               :x:           :x:

  Print variables using   :+1:              :+1:            :x:            :x:                :+1:          :x:
  current word/heuristic                                                                                    

  Print variables using   :+1:              :+1:            :x:            :+1:               :x:           :x:
  treesitter                                                                                                

  Print                   :+1:              :x:             :x:            :x:                :x:           :x:
  variables/expressions                                                                                     
  using prompts                                                                                             

  Print variables using   :+1:              :x:             :+1:           :x:                :x:           :x:
  motions                                                                                                   

  Print variables using   :+1:              :+1:            :+1:           :+1:               :+1:          :x:
  visual mode                                                                                               

  Print assertions        :x:               :+1:            :x:            :x:                :x:           :x:

  Print stack traces      :x:               :+1:            :x:            :x:                :x:           :x:

  Add time-tracking logic :x:               :+1:            :x:            :x:                :x:           :x:

  Add debugging           :x:               :+1:            :x:            :x:                :x:           :x:
  breakpoints                                                                                               

  Print debug lines       :+1:              :x:             (via global    :x:                :+1:          :x:
  above/below current                                       config)                                         
  line                                                                                                      

  Supports dot-repeat     :+1:              :+1:            :x:            :x:                :x:           :x:

  Can control whether to  :+1:              :x:             :x:            :x:                :x:           :x:
  move to inserted lines                                                                                    

  Clean up all debug      :+1:              :+1:            :x:            :x:                :x:           :x:
  lines                                                                                                     

  Comment/uncomment all   :+1:              :x:             :x:            :x:                :x:           :x:
  debug lines                                                                                               

  Can put debugprint text :x:               :x:             :+1:           :x:                :x:           :x:
  into default register                                                                                     

  Built-in support for:   -                 -               -              -                  -             -

  Apex (Salesforce)       :+1:              :x:             :x:            :x:                :x:           :x:

  AppleScript             :+1:              :+1:            :x:            :x:                :x:           :x:

  bash/sh                 :+1:              :+1:            :+1:           :x:                :+1:          :x:

  C                       :+1:              :x:             :x:            :x:                :x:           :x:

  C#                      :+1:              :x:             :x:            :x:                :x:           :x:

  C++                     :+1:              :x:             :+1:           :+1:               :+1:          :x:

  CMake                   :+1:              :x:             :x:            :x:                :x:           :x:

  dart                    :+1:              :x:             :x:            :x:                :x:           :x:

  Docker                  :+1:              :x:             :x:            :x:                :x:           :x:

  DOS/Windows Batch       :+1:              :x:             :x:            :x:                :x:           :x:

  Elixir                  :+1:              :x:             :x:            :x:                :x:           :x:

  fish                    :+1:              :x:             :x:            :x:                :x:           :x:

  Fortran                 :+1:              :x:             :x:            :x:                :+1:          :x:

  Golang                  :+1:              :x:             :+1:           :+1:               :+1:          :+1:

  Haskell                 :+1:              :x:             :x:            :x:                :x:           :x:

  Java                    :+1:              :x:             :+1:           :+1:               :+1:          :x:

  Javascript/Typescript   :+1:              :+1:            :+1:           :+1:               :+1:          :+1:

  Kotlin                  :+1:              :x:             :x:            :x:                :x:           :x:

  lean                    :+1:              :x:             :x:            :x:                :x:           :x:

  lua                     :+1:              :+1:            :+1:           :+1:               :+1:          :+1:

  GNU Make                :+1:              :x:             :x:            :x:                :x:           :x:

  Perl                    :+1:              :x:             :x:            :x:                :x:           :x:

  PHP                     :+1:              :x:             :x:            :+1:               :x:           :x:

  Powershell/ps1          :+1:              :x:             :x:            :x:                :x:           :x:

  Python                  :+1:              :+1:            :+1:           :+1:               :+1:          :x:

  R                       :+1:              :x:             :x:            :x:                :x:           :x:

  Ruby                    :+1:              :+1:            :x:            :+1:               :x:           :x:

  Rust                    :+1:              :+1:            :+1:           :x:                :+1:          :x:

  Swift                   :+1:              :x:             :x:            :x:                :x:           :x:

  VimL (vimscript)        :+1:              :x:             :+1:           :x:                :+1:          :x:

  Zig                     :+1:              :x:             :x:            :x:                :x:           :x:

  zsh                     :+1:              :x:             :+1:           :x:                :+1:          :x:

  Add custom filetypes    :+1:              :+1:            :+1:           :x:                :x:           :+1:

  Customizable callback   :x:               :x:             :+1:           :x:                :x:           :x:
  formatter                                                                                                 

  Implemented in          Lua               Lua             Lua            Lua                VimL          Lua
  ---------------------------------------------------------------------------------------------------------------------
Other similar plugins (less popular or unmaintained):

- my-neovim-pluglist <https://yutkat.github.io/my-neovim-pluginlist/debugger_repl.html#print-debug>
- vim-debugstring <https://github.com/bergercookie/vim-debugstring>
- vim-printf <https://github.com/mptre/vim-printf>

==============================================================================
10. Links                                              *debugprint.nvim-links*

1. *Test status*: https://github.com/andrewferrier/debugprint.nvim/actions/workflows/tests.yaml/badge.svg

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
