*debugprint.nvim.txt*             For NVIM             Last change: 2025-05-18

==============================================================================
Table of Contents                          *debugprint.nvim-table-of-contents*

1. Overview                                         |debugprint.nvim-overview|
2. Features                                         |debugprint.nvim-features|
3. Demo                                                 |debugprint.nvim-demo|
4. Installation                                 |debugprint.nvim-installation|
5. Keymappings and Commands         |debugprint.nvim-keymappings-and-commands|
6. Mapping Deprecation                   |debugprint.nvim-mapping-deprecation|
7. Other Options                               |debugprint.nvim-other-options|
8. Known Limitations                       |debugprint.nvim-known-limitations|
9. Feature Comparison with Similar Plugins|debugprint.nvim-feature-comparison-with-similar-plugins|
10. Links                                              |debugprint.nvim-links|
>text
    ▗▄▄▄ ▗▄▄▄▖▗▄▄▖ ▗▖ ▗▖ ▗▄▄▖▗▄▄▖ ▗▄▄▖ ▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖
    ▐▌  █▐▌   ▐▌ ▐▌▐▌ ▐▌▐▌   ▐▌ ▐▌▐▌ ▐▌  █  ▐▛▚▖▐▌  █
    ▐▌  █▐▛▀▀▘▐▛▀▚▖▐▌ ▐▌▐▌▝▜▌▐▛▀▘ ▐▛▀▚▖  █  ▐▌ ▝▜▌  █
    ▐▙▄▄▀▐▙▄▄▖▐▙▄▞▘▝▚▄▞▘▝▚▄▞▘▐▌   ▐▌ ▐▌▗▄█▄▖▐▌  ▐▌  █
<




==============================================================================
1. Overview                                         *debugprint.nvim-overview*

`debugprint` is a NeoVim plugin that simplifies debugging for those who prefer
a low-tech approach
<https://www.polymonster.co.uk/blog/printf-debugging-is-ok>. Instead of using a
sophisticated debugger like nvim-dap
<https://github.com/mfussenegger/nvim-dap>, some people prefer using a
'print'-like statement to trace the output during execution. With `debugprint`,
you can insert these statements, including the values of variables, relevant to
the language you’re editing.


==============================================================================
2. Features                                         *debugprint.nvim-features*

`debugprint` is inspired by vim-debugstring
<https://github.com/bergercookie/vim-debugstring>; updated for the NeoVim
generation. It:

- Supports 40 filetypes/programming languages out-of-the-box, including Python,
    JavaScript/TypeScript, Java, C/C++ and |debugprint.nvim-more|. It can also be
    extended to support other languages or customize existing ones <SHOWCASE.md>.
- Includes reference information in each 'print line' such as file names, line
    numbers, a counter (which persists between NeoVim sessions), and snippets of
    other lines to make it easier to cross-reference them in output. Each of these
    can be optionally disabled |debugprint.nvim-globally| or on a per-filetype
    basis <SHOWCASE.md#setting-display_-options-on-per-filetype-basis>.
- Will highlight inserted lines to make them easier to find in your code (depends
    on mini.hipatterns <https://github.com/echasnovski/mini.hipatterns>).
- Can output the value of variables (or in some cases, expressions) - it will
    detect a variable name under the cursor for some languages using Treesitter, or
    will prompt with a sensible default. It understands Treesitter embedded
    languages (e.g. JavaScript-in-HTML).
- Provides |debugprint.nvim-keymappings| for normal, insert, visual, and
    operator-pending modes. Supports dot-repeat
    <https://jovicailic.org/2018/03/vim-the-dot-command/>. Can insert two
    'surrounding' lines at the same time.
- Supports direct writing to NeoVim registers for batch insert of debugprint
    lines.
- Provides |debugprint.nvim-commands| to delete or comment debugging lines added
    to the current buffer, search for those lines in the current directory
    (project) using fzf-lua,telescope or snacks.nvim and add those lines to the quickfix list.
- Can optionally move to the inserted line (or not).


==============================================================================
3. Demo                                                 *debugprint.nvim-demo*

Recent interview video showing most of the key features of debugprint:



Older, shorter demo video showing basic features. 


==============================================================================
4. Installation                                 *debugprint.nvim-installation*

**Requires NeoVim 0.10+.**

Example for `lazy.nvim` <https://github.com/folke/lazy.nvim>:

>lua
    return {
        "andrewferrier/debugprint.nvim",

        -- opts = { … },

        dependencies = {
            "echasnovski/mini.nvim",        -- Optional: Needed for line highlighting
            "ibhagwan/fzf-lua",             -- Optional: If you want to use the :SearchDebugPrints command with fzf-lua
            "nvim-telescope/telescope.nvim" -- Optional: If you want to use the :SearchDebugPrints command with telescope.nvim
            "folke/snacks.nvim",            -- Optional: If you want to use the :SearchDebugPrints command with snacks.nvim
        },

        lazy = false, -- Required to make line highlighting work before debugprint is first used
        version = "*", -- Remove if you DON'T want to use the stable version
    }
<

(Examples for other package managers here
<SHOWCASE.md#using-package-managers-other-than-lazynvim>.)

The sections below detail the allowed options that can appear in the `opts`
object. There is also a showcase of example and advanced debugprint
configurations here <SHOWCASE.md> which can be dropped into your configuration
files to further enhance your use of debugprint.

Please subscribe to this GitHub issue
<https://github.com/andrewferrier/debugprint.nvim/issues/25> to be notified of
any breaking changes to `debugprint`.


==============================================================================
5. Keymappings and Commands         *debugprint.nvim-keymappings-and-commands*

By default, the plugin will create some keymappings and commands for use 'out
of the box'. There are also some function invocations which are not mapped to
any keymappings or commands by default, but could be. This is all shown in the
following table.

  ----------------------------------------------------------------------------------------------
  Mode         Default Key / Cmd           Purpose                                 Above/Below
                                                                                   Line
  ------------ --------------------------- --------------------------------------- -------------
  Normal       g?p                         Plain debug                             Below

  Normal       g?P                         Plain debug                             Above

  Normal       g?v                         Variable debug                          Below

  Normal       g?V                         Variable debug                          Above

  Normal       None                        Variable debug (always prompt for       Below
                                           variable)

  Normal       None                        Variable debug (always prompt for       Above
                                           variable)

  Normal       g?sp                        Plain debug                             Above and
                                                                                   below
                                                                                   (surround)

  Normal       g?sv                        Variable debug                          Above and
                                                                                   below
                                                                                   (surround)

  Normal       None                        Variable debug (always prompt for       Above and
                                           variable)                               below
                                                                                   (surround)

  Normal       None                        Delete debug lines in buffer            -

  Normal       None                        Comment/uncomment debug lines in buffer -

  Insert       Ctrl-G p                    Plain debug                             In-place

  Insert       Ctrl-G v                    Variable debug (always prompt for       In-place
                                           variable)

  Visual       g?v                         Variable debug                          Below

  Visual       g?V                         Variable debug                          Above

  Op-pending   g?o                         Variable debug                          Below

  Op-pending   g?O                         Variable debug                          Above

  Op-pending   g?so                        Variable debug                          Above and
                                                                                   below
                                                                                   (surround)

  Command      :DeleteDebugPrints          Delete debug lines in buffer            -

  Command      :ToggleCommentDebugPrints   Comment/uncomment debug lines in buffer -

  Command      :ResetDebugPrintsCounter    Reset debug print persistent counter    -
                                           (only for built-in counter
                                           implementation)

  Command      :SearchDebugPrints          Search for all debug print lines in the -
                                           current directory using fzf-lua,
                                           telescope.nvim or snacks.nvim

  Command      :DebugPrintQFList           Search for all debug print lines in the -
                                           current directory and populate quickfix
                                           list
  ----------------------------------------------------------------------------------------------
Each of the keymappings (except for 'surround' keys and insert modes) can also
be prefixed with a register, see the showcase <SHOWCASE.md#register-usage> for
an example of how to use this to insert debugprint lines in batches.

The keys and commands outlined above can be specifically overridden using the
`keymaps` and `commands` objects inside the `opts` object used above during
configuration of debugprint. For example, if configuring via `lazy.nvim`, it
might look like this:

>lua
    return {
        "andrewferrier/debugprint.nvim",
        opts = {
            keymaps = {
                normal = {
                    plain_below = "g?p",
                    plain_above = "g?P",
                    variable_below = "g?v",
                    variable_above = "g?V",
                    variable_below_alwaysprompt = "",
                    variable_above_alwaysprompt = "",
                    surround_plain = "g?sp",
                    surround_variable = "g?sv",
                    surround_variable_alwaysprompt = "",
                    textobj_below = "g?o",
                    textobj_above = "g?O",
                    textobj_surround = "g?so",
                    toggle_comment_debug_prints = "",
                    delete_debug_prints = "",
                },
                insert = {
                    plain = "<C-G>p",
                    variable = "<C-G>v",
                },
                visual = {
                    variable_below = "g?v",
                    variable_above = "g?V",
                },
            },
            commands = {
                toggle_comment_debug_prints = "ToggleCommentDebugPrints",
                delete_debug_prints = "DeleteDebugPrints",
                reset_debug_prints_counter = "ResetDebugPrintsCounter",
                search_debug_prints = "SearchDebugPrints",
            },
            -- … Other options
        },
    }
<

You only need to include the keys / commands which you wish to override, others
will default as shown above. Setting any key or command to `""` or `false` will
skip it.

The default keymappings are chosen specifically because ordinarily in NeoVim
they are used to convert sections to ROT-13, which most folks don’t use.


==============================================================================
6. Mapping Deprecation                   *debugprint.nvim-mapping-deprecation*


  [!WARNING] _Note_: as of version 2.0.0, the old mechanism of configuring
  keymaps/commands which specifically allowed for mapping directly to
  `require('debugprint').debugprint(...)` is no longer officially supported or
  documented. This is primarily because of confusion
  <https://github.com/andrewferrier/debugprint.nvim/issues/44#issuecomment-1896405231>
  which arose over how to do this mapping. Existing mappings performed this way
  are likely to continue to work for some time. You should, however, migrate over
  to the new method outlined above. If this doesn’t give you the flexibility to
  map how you wish for some reason, please open an issue
  <https://github.com/andrewferrier/debugprint.nvim/issues/new>.

==============================================================================
7. Other Options                               *debugprint.nvim-other-options*

`debugprint` supports the following options in its global `opts` object:

  ---------------------------------------------------------------------------------------------
  Option                 Default      Purpose
  ---------------------- ------------ ---------------------------------------------------------
  move_to_debugline      false        When adding a debug line, moves the cursor to that line

  display_location       true         Include the filename and linenumber of the line being
                                      debugged in the debug message

  display_counter        true         Include the increasing integer counter in the debug
                                      message. (If you want to customize this counter, or make
                                      it non-persistent, see instructions in the showcase for
                                      an example).

  display_snippet        true         Include a snippet of the line above/below in the debug
                                      message (plain debug lines only) for context

  notify_for_registers   true         If set to false, disables the notifications that occur
                                      when debugprint lines are inserted or appended to
                                      registers

  highlight_lines        true         Apply highlighting to debugprint lines. See showcase for
                                      more information on customization and limitations

  filetypes              See (the     Custom filetypes - see showcase
                         code)

  print_tag              DEBUGPRINT   The string inserted into each print statement, which can
                                      be used to uniquely identify statements inserted by
                                      debugprint. If you set this to '' (the empty string), no
                                      print tag will be included, but this will disable the
                                      ability to delete, comment, or highlight print statements
                                      via debugprint
  ---------------------------------------------------------------------------------------------

==============================================================================
8. Known Limitations                       *debugprint.nvim-known-limitations*

- `debugprint` does not handle deleting reformatted debug lines where a
    formatter has split them across multiple lines. If you want to be able to easily
    delete your debug lines using `DeleteDebugPrints` or similar, don’t format your
    file between inserting them and running this command. See this
    issue <https://github.com/andrewferrier/debugprint.nvim/issues/119> for
    discussion on this.


==============================================================================
9. Feature Comparison with Similar Plugins*debugprint.nvim-feature-comparison-with-similar-plugins*

(This table is quite wide, you may need to scroll horizontally)

  -------------------------------------------------------------------------------------------------------------------------------------
  Feature                 debugprint.nvim   timber.nvim   nvim-chainsaw     printer.nvim   refactoring.nvim   vim-printer   logsitter
  ----------------------- ----------------- ------------- ----------------- -------------- ------------------ ------------- -----------
  Include line numbers in :+1:              :+1: (via     :+1: (via user    :+1:           :+1:               :x:           :+1:
  log lines                                 user config)  config)

  Include other location  :+1:              :x:           :+1: (via user    :+1:           :+1:               :x:           :+1:
  information in log                                      config)
  lines

  Persistent location     :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  counter between NeoVim
  sessions

  Print plain debug lines :+1:              :+1: (via     :+1:              :x:            :+1:               :x:           :x:
                                            user config)

  Print variables using   :+1:              :+1:          :+1:              :x:            :+1:               :x:           :x:
  treesitter

  ‘Surround’ lines with   :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  debugging above and
  below

  Use treesitter to       (some languages)  :+1:          :+1:              :x:            :x:                :x:           :x:
  locate log targets

  Use treesitter to       :x:               :+1:          :+1:              :x:            :x:                :x:           :x:
  intelligently insert
  log lines

  Enter                   :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  variables/expressions
  using prompts

  Fallback to variables   :+1:              :x:           :+1:              :x:            :x:                :+1:          :x:
  using current
  word/heuristic

  Print variables using   :+1:              :+1:          :x:               :+1:           :x:                :x:           :x:
  motions/operator

  Add plain or variable   :+1:              :x:           :x:               :x::           :x:                :x:           :x:
  debug lines in insert
  mode

  Add variable debug      :+1:              :+1:          :+1:              :+1:           :+1:               :+1:          :x:
  lines in visual mode

  Print assertions        :x:               :+1: (via     :+1:              :x:            :x:                :x:           :x:
                                            user config)

  Print stack traces      :x:               :+1: (via     :+1:              :x:            :x:                :x:           :x:
                                            user config)

  Add time-tracking logic :x:               :+1: (via     :+1:              :x:            :x:                :x:           :x:
                                            user config)

  Add debugging           :x:               :+1: (via     :+1:              :x:            :x:                :x:           :x:
  breakpoints                               user config)

  Print debug lines       :+1:              :+1:          :x:               (via global    :x:                :+1:          :x:
  above/below current                                                       config)
  line

  Supports dot-repeat     :+1:              :+1:          :+1:              :x:            :x:                :x:           :x:

  Can control whether to  :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  move to inserted lines

  Clean up/delete all     :+1:              :+1:          :+1:              :x:            :x:                :x:           :x:
  debug lines in buffer

  Comment/uncomment all   :+1:              :+1:          :x:               :x:            :x:                :x:           :x:
  debug lines in buffer

  Comment/uncomment all   :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  debug lines in selected
  range

  Can put debugprint text :+1:              :x:           :x:               :+1:           :x:                :x:           :x:
  into register

  Search for debugprint   :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  lines using fzf-lua
  telescope, or snacks.nvim

  Search for debugprint   :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  lines and populate
  quickfix list

  Extra visual emphasis   :+1: Highlights   :+1: Flashes  :+1: status line  :x:            :x:                :x:           :x:
  of log statements       inserted lines    to highlight  counter,
                                            lines on      signcolumn,
                                            insertion     line-highlight,
                                                          scrollbar

  Can insert logs in      :+1: (using       :+1:          :x:               :x:            :x:                :x:           :x:
  batches                 registers)

  Log watcher mechanism   :x:               :+1:          :x:               :x:            :x:                :x:           :x:

  Dynamic filetype        :+1:              :x:           :x:               :x:            :x:                :x:           :x:
  configuration/log
  templates

  Completely customizable :x:               :+1:          :+1:              :+1:           :x:                :x:           :x:
  log templates

  Built-in support for:   -                 -             -                 -              -                  -             -

  Apex (Salesforce)       :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  AppleScript             :+1:              :x:           :+1:              :x:            :x:                :x:           :x:

  Astro                   :+1:              :+1:          :x:               :x:            :x:                :x:           :x:

  bash/sh                 :+1:              :x:           :+1:              :+1:           :x:                :+1:          :x:

  C                       :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  C# (C Sharp)            :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  C++                     :+1:              :x:           :x:               :+1:           :+1:               :+1:          :x:

  CMake                   :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Cobol                   :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  dart                    :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Docker                  :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  DOS/Windows Batch       :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Elixir                  :+1:              :+1:          :x:               :x:            :x:                :x:           :x:

  fish                    :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Fortran                 :+1:              :x:           :x:               :x:            :x:                :+1:          :x:

  Golang                  :+1:              :+1:          :+1:              :+1:           :+1:               :+1:          :+1:

  Haskell                 :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Java                    :+1:              :x:           :x:               :+1:           :+1:               :+1:          :x:

  Javascript/Typescript   :+1:              :+1:          :+1:              :+1:           :+1:               :+1:          :+1:

  Kotlin                  :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  lean                    :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Lisp                    :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  lua                     :+1:              :+1:          :+1:              :+1:           :+1:               :+1:          :+1:

  luau                    :+1:              :+1:          :x:               :x:            :x:                :x:           :x:

  GNU Make                :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Odin                    :x:               :+1:          :x:               :x:            :x:                :x:           :x:

  Perl                    :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  PHP                     :+1:              :x:           :x:               :x:            :+1:               :x:           :x:

  Powershell/ps1          :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Python                  :+1:              :x:           :+1:              :+1:           :+1:               :+1:          :x:

  R                       :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  React                   :+1:              :x:           :+1:              :x:            :x:                :x:           :x:

  Ruby                    :+1:              :+1:          :+1:              :x:            :+1:               :x:           :x:

  Rust                    :+1:              :+1:          :+1:              :+1:           :x:                :+1:          :x:

  Swift                   :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  Svelte                  :+1:              :x:           :+1:              :x:            :x:                :x:           :x:

  tcl                     :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  VimL (vimscript)        :+1:              :x:           :x:               :+1:           :x:                :+1:          :x:

  Vue                     :+1:              :x:           :+1:              :x:            :x:                :x:           :x:

  Zig                     :+1:              :x:           :x:               :x:            :x:                :x:           :x:

  zsh                     :+1:              :x:           :+1:              :+1:           :x:                :+1:          :x:

  Add custom filetypes    :+1:              :+1:          :+1:              :+1:           :x:                :x:           :+1:

  Implemented in          Lua               Lua           Lua               Lua            Lua                VimL          Lua
  -------------------------------------------------------------------------------------------------------------------------------------
There is also a similar table in the nvim-chainsaw documentation
<https://github.com/chrisgrieser/nvim-chainsaw?tab=readme-ov-file#comparison-with-similar-plugins>.

Other similar plugins (less popular or unmaintained):

- my-neovim-pluglist <https://yutkat.github.io/my-neovim-pluginlist/debugger_repl.html#print-debug>
- vim-debugstring <https://github.com/bergercookie/vim-debugstring>
- vim-printf <https://github.com/mptre/vim-printf>

==============================================================================
10. Links                                              *debugprint.nvim-links*

1. *Test status*: https://github.com/andrewferrier/debugprint.nvim/actions/workflows/tests.yaml/badge.svg
2. *GitHub License*: https://img.shields.io/github/license/andrewferrier/debugprint.nvim

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
